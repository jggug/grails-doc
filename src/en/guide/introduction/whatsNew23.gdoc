h4. Improved Dependency Management

The default dependency resolution engine used by Grails has been changed to [Aether|http://eclipse.org/aether], the dependency resolution engine used by Maven. Which engine you use can be configured in @BuildConfig@:

{code}
grails.project.dependency.resolver = "maven" // or ivy
{code}

Using Aether dependency resolution in Grails results in the same behavior as when using the Maven build tool, meaning improved snapshot handling, understanding of custom packaging types and so on.

In addition, the [dependency-report|commandLine] command has been updated to print the dependency graph of the console, which helps in diagnosing dependency resolution failures. See the chapter on [Dependency Resolution|guide:dependencyResolution] for more information.


h4. Data Binder

Grails 2.3 includes a new data binding mechanism which is more flexible and easier to maintain than the data binder used in previous versions.  The new data binder includes numerous enhancements including:

* Custom date formats on a per field basis using [BindingFormat|api:org.grails.databinding.BindingFormat]
* User defined data converters using [ValueConverter|api:org.grails.databinding.converters.ValueConverter]
* User defined formatted data converters using [BindingFormat|api:org.grails.databinding.BindingFormat] and [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter]
* Custom binding on a per class basis using [BindUsing|api:org.grails.databinding.BindUsing]
* Custom binding on a per field basis using [BindUsing|api:org.grails.databinding.BindUsing]
* By default all blank and empty Strings will be converted to null during data binding (configurable)

See the [Data Binding|guide:dataBinding] section for details.

The legacy data binder may be used by assigning @true@ to the @grails.databinding.useSpringBinder@ property in @grails-app/conf/Config.groovy@.  Note that the legacy binder does not support any of the new features provided by the new data binder.

h4. Forked Execution

All major commands can now be forked into a separate JVM, thus isolating the build path from the runtime / test paths. Forked execution can be controlled via the @BuildConfig@:

{code}
forkConfig = [maxMemory: 1024, minMemory: 64, debug: false, maxPerm: 256]
grails.project.fork = [
   test: forkConfig, // configure settings for the test-app JVM
   run: forkConfig, // configure settings for the run-app JVM
   war: forkConfig, // configure settings for the run-war JVM
   console: forkConfig // configure settings for the Swing console JVM
]
{code}

See the documentation on [Forked Mode|guide:forkedMode] for more information.

h4. Async support

Grails 2.3 features new [Asynchronous Programming APIs|guide:async] that allow for asynchronous processing of requests and integrate seamlessly with GORM. Example:

{code}
import static grails.async.Promises.*
...
def index() {
   tasks books: Book.async.list(),
         totalBooks: Book.async.count(),
         otherValue: {
           // do hard work
         }
}
{code}

See [the documentation|guide:async] for further information.

h4. Encoding / Escaping Improvements

Grails 2.3 features dedicated support for [Cross Site Scripting (XSS) prevention|guide:xssPrevention], including :

* Defaulting to HTML escaping all GSP expressions and scriptlets
* Context sensitive encoding switching for tags
* Double encoding prevention
* Optional automatic encoding of all data in a GSP page not considered safe

See the documentation on [Cross Site Scripting (XSS) prevention|guide:xssPrevention] for more information.

h4. Hibernate 3 and 4 support

The GORM for Hibernate 3 support for Grails has been extracted into a separate project, allowing new support for Hibernate 4 as a separate plugin.

h4. Command Line

The @create-app@ command will now by default generate the command line grailsw wrapper for newly created applications.  The @--skip-wrapper@ switch may be used to prevent the wrapper from being generated.

{code}
grails create-app appname --skip-wrapper
{code}
